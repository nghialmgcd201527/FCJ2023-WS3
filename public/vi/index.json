[
{
	"uri": "/vi/5-deploy/5.1-deployserverless/",
	"title": "Deploy Serverless Application",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ sử dụng SAM CLI để build và deploy ứng dụng serverless.\nĐầu tiên, chúng ta cần chắc chắn rằng đã cập nhật phiên bản mới nhất của SAM CLI.\npip install --user --upgrade aws-sam-cli Chúng ta sẽ thấy output như hình. Tiếp theo, đi đến thư mục sam:\ncd ~/environment/serverless-tasks-webapp/sam Chạy câu lệnh dưới đây để build ứng dụng:\nsam build Khi build thành công, chúng ta sẽ có như hình.\nCâu lệnh sam build xử lí file template AWS SAM, code của ứng dụng và những dependencies. Nó cũng coppy build artifacts theo một format và ví trị được xác định sẵn trong workflow của bạn.\nBây giờ, chúng ta sẽ deploy ứng dụng:\nsam deploy --guided Câu lệnh này sẽ đóng gói và deploy ứng dụng lên account AWS của chúng ta.\nĐầu tiên, nó sẽ hỏi chúng ta tên stack, chúng ta có thể đặt tên bất kỳ, ở đây chúng ta đặt là tasks-app. Sau đó sẽ chọn region mà chúng ta muốn deploy ứng dụng lên, ở đây chúng ta chọn ap-southeast-1.\nTiếp theo, chúng ta sẽ nhập y và nhấn Enter để confirm deploy.\nĐể cho phép SAM có thể tạo roles để kết nối tới các resources trong template của chúng ta, hãy cho phép SAM CLI tạo ra IAM roles, chúng ta nhập Y và nhấn Enter.\nVô hiệu hóa rollback để bảo vệ những resources của chúng ta khi quá trình khiển khai thất bại, chúng ta nhập y và nhấn Enter.\nCho phép lưu các arguments vào file cấu hình, chúng ta nhập Y và nhấn Enter.\nVì file SAM configuration chưa có nên chúng ta tạo ra nó, chúng ta nhấn Enter để mặc định, tương tự với môi trường của SAM configuration.\nKiểm tra lại thông tin trước khi deploy.\nNếu deploy thành công, chúng ta sẽ thấy output như hình.\nHãy ghi chú và lưu lại giá trị của key TasksApi và S3BucketName, nó sẽ cần cho những bước tiếp theo.\n"
},
{
	"uri": "/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Trước khi đi vào những bài labs, đây là phần sẽ giới thiệu những kiến thức cơ bản cần học và hiểu được trong bài workshop này.\n"
},
{
	"uri": "/vi/6-test/6.1-dynamodb/",
	"title": "Quản lí dữ liệu trong DynamoDB",
	"tags": [],
	"description": "",
	"content": " Nhập DynamoDB ở thanh tìm kiếm service trên AWS Console sau đó chọn DynamoDB. Ở thanh điều hướng bên trái, chọn Tables. Click vào table có tên bao gồm tên của ứng của chúng ta tasks-app-TasksTable. Đây là table được tạo bởi SAM template. Click vào nút Explore table items. Chúng ta sẽ thấy dữ liệu ở trong table ở phần Items returned.\nClick vào partition key (user) của bảng đó sẽ đưa bạn đến nơi chỉnh sửa thông tin của item đó.\nKhi bạn thay đổi dữ liệu ở DynamoDB, chúng ta cần refresh lại trang web của ứng dụng để thấy được sự thay đổi.\n"
},
{
	"uri": "/vi/3-cache/3.1-urired/",
	"title": "URI based Redirects",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ bắt đầu với một trường hợp đơn giản có thể dễ dàng hiểu được bằng cách sử dụng Lambda@Edge vì trường hợp này có thể được cached, do đó sẽ tốt nhất khi xử lí bằng các Lambda@Edge.\nTrường hợp này thường được sử dụng để redirect users vì một lí do nào đó khi request URI mà admin không muốn users đó xem hoặc URI có thể không khả dụng nữa. Ví dụ, user có thể gửi request đến /uri-main.html, tuy nhiên, admin muốn tất cả request đó được thực hiện bởi /uri-redirect.html\nStep 1: Tạo ra Cache Behavior cho trường hợp này Để thực hiện được trường hợp này, đầu tiên bạn sẽ tạo ra một cache behavior cụ thể. Các bước sau dây sẽ hướng dẫn để làm trường hợp này.\nĐi đến CloudFront console. Các bạn sẽ thấy Distribution được tạo ra bởi CloudFormation template, nó sẽ được xác định bởi Edge Redirect Workshop Distribution như ở mục Description. Chọn Distribution đó sau đó chọn vào mục Behaviors. Click vào nút Create Behavior. Ở mục Path pattern, chúng ta nhập /uri-main.html, ở dưới là phần Origin and origin groups, chúng ta chọn myS3Origin. Ở phần Viewer protocol policy, chúng ta chọn Redirect HTTP to HTTPS. Những mục còn lại chúng ta sẽ để mặc định và click vào nút Create behavior ở cuối trang. Step 2: Tạo Lambda@Edge function và publish new version Bước này sẽ là quá trình tạo ra function của chúng ta cùng với version của nó. Các Lambda@Edge functions cần được CloudFront Distribution refer dựa vào version ARN của chúng chứ không phải main function ARN của chúng.\nĐi vào Lambda Console ỏ AWS Region us-east-1, click vào nút Create function. Ở trang Create function, đặt tên cho function của chúng ta là edge-uri-redirect, chọn Python 3.9 cho phần Runtime. Ở phía dưới, chúng ta mở mục Change default execution role rồi chọn Use an existing role, chúng ta chọn edge-redirect-lambda-role (đây là role được tạo từ CloudFormation template). Cuối cùng là click vào nút Create function. Khi function được tạo xong, chúng ta ở trang chính của function đó. Ở phần Code ở dưới, chúng ta copy đoạn code dưới đây và paste vào phần Code source. import json\rdef lambda_handler(event, context):\rget_uri = event[\u0026#39;Records\u0026#39;][0][\u0026#39;cf\u0026#39;][\u0026#39;request\u0026#39;][\u0026#39;uri\u0026#39;]\rprint(get_uri)\rif (get_uri == \u0026#39;/uri-main.html\u0026#39;):\rresponse = {\r\u0026#39;status\u0026#39;: \u0026#39;301\u0026#39;,\r\u0026#39;statusDescription\u0026#39;: \u0026#39;Permanent Redirect\u0026#39;,\r\u0026#39;headers\u0026#39;: {\r\u0026#39;location\u0026#39;: [{\r\u0026#39;key\u0026#39;: \u0026#39;Location\u0026#39;,\r\u0026#39;value\u0026#39;: \u0026#39;/uri-redirect.html\u0026#39;\r}]\r}\r}\rreturn response\relse:\rrequest = event[\u0026#39;Records\u0026#39;][0][\u0026#39;cf\u0026#39;][\u0026#39;request\u0026#39;]\rreturn request Ở đoạn code này được dùng như một AWS CloudFront function. Nó phục vụ cho CloudFront event handler và implement logic cho URL redirection dựa vào URI được request. Function lambda_handler là entry point của Lambda function, nó gồm 2 parameters là event và context. Function này extract URI được request từ CloudFront event. Nếu request URI là /uri-main.html, code sẽ trả về một response với status code 301 và location header được set là /uri-redirect.html. Nếu URI không phải là /uri-main.html, code sẽ trả về request object.\nTiếp theo, click vào nút Deploy để code của lambda function của chúng ta được commit. Khi code của chúng ta được deploy thành công, chúng ta sẽ publish version mới cho lambda này. Click vào nút Actions ở góc bên phải, chúng ta chọn Publish new version. Chúng ta nhập edge-uri-redirect-v1 cho phần Version description và click vào nút Publish.\nStep 3: Kết hợp Lambda Function với CloudFront Behavior Quay trở lại lambda function console và mở function edge-uri-redirect.\nClick vào + Add trigger\nỞ trang Trigger configuration, chúng ta chọn CloudFront cho phần source. Sau đó click vào Deploy on Lambda@Edge. Có một cửa số mới mở ra, ở phần Distribution, chúng ta chọn distribution được tạo từ CloudFormation template. Phần Cache behavior, chúng ta chọn /uri-main.html. Ở phần CloudFront event, chọn Origin request. Đánh dấu vào ô Confirm deploy to Lambda@Edge và click vào nút Deploy. Step 4: Set up client cho testing Để test redirect cụ thể, chúng ta sẽ cần một client để chạy curl commands. Cách dễ dàng đó là tạo CloudShell Environments. CloudShell là một shell có sẵn trong AWS console và chúng ta có thể chạy những Linux command từ nó. Đi đến CloudShell Console và chờ đến khi terminal sẵn sàng để dùng.\nNếu CloudShell không hoạt động thì nếu bạn đang thực hành bài workshop này ở Linux/MacOS client thì hai hệ điều hành này đã có sẵn curl và bạn chỉ cần chạy command ở client đó. Nếu bạn đang thực hành trên Windows thì hãy tận dùng online curl tools như cái này. Có thể chạy EC2 instance hoặc Cloud9 IDE từ AWS COnsole để chạy commands.\nStep 5: Test redirect configuration Đi đến CloudShell Console.\nTrong phần test, chúng ta sẽ chạy câu lệnh curl để gửi http request đối với distrubtion của chúng ta, để làm như vậy, chúng ta cần copy Distribution domain name từ CloudFront console nơi chúng ta có thể tìm thấy.\nKhi đã tìm thấy distribution domain name, copy câu lệnh sau và thay thế domain name của chúng ta vào.\ncurl -v -o /dev/null https://\u0026lt;YOUR-DISTRIBUTION-DOMAIN-NAME\u0026gt;/uri-main.html Sau khi build câu lệnh trên từ cloudshell, chúng ta sẽ thấy kết quả như dưới đây. Chúng ta có thể thấy ở kết quả trên, request này nhận response HTTP 301, biểu thị redirect và Location header là URI nơi mà client được redirect đến.\nBây giờ, chúng ta chạy lại cùng câu lệnh trên. Và xem sự khác biệt. Sự khác biệt ở lần chạy câu lệnh này lại là giá trị của X-Cache header. Request bây giờ nhận response được redirect và đã được cache từ lần chạy câu lệnh trước đó. Có nghĩa là Lambda@edge của chúng ta không cần trigger lại, tiết kiệm thời gian và chi phí.\nChúng ta đã deploy thành công redirect đầu tiên bằng Lambda@Edge và đã test xong. Bây giờ chúng ta di chuyển sang trường hợp tiếp theo.\n"
},
{
	"uri": "/vi/1-introduce/1.1-usecase/",
	"title": "Use Cases",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ tìm hiểu thông tin cơ bản về các tính năng của Edge Compute mà chúng ta sẽ khám phá trong bài workshop này. Nó sẽ cung cấp cho chúng ta kiến thức nền tảng và nội dung liên quan đến các bài labs.\nTrước khi giới thiệu về AWS Edge computes, chúng ta cần có những kiến thức về các techniques khác nhau được sử dụng trong bài workshop này để chuyển hướng các trang từ trang khác từ yêu cầu của người dùng. Nó được gọi là Redirects và Rewrites.\nRedirects: URL redirections đưa trình duyệt đến một resource mới hoặc một trang web khác. Các HTTP response codes phổ biến là HTTP 301, HTTP 302 và HTTP 308. Sau khi trình duyệt nhận được response từ server, nó sẽ fetch content từ URL mà server trả về. Để biết thêm thông tin, hãy xem ở đây. Có một số trường hợp cần sử dụng đó là khách hàng muốn Redirects bao gồm các tình huống cần routing users đến domain mới hoặc ngay cả khi redirect users đến website chính, redirect để đưa user đến trang dựa vào thiết bị hoặc vị trí địa lí của họ và những trường hợp khác mà chúng ta sẽ tìm hiểu trong bài workshop này.\nRewrites: URL rewrites cũng là một technique được sử dụng để lưu trữ một nội dung khác với nội dung users yêu cầu, tuy nhiên nó sẽ không xử lí một redirect đầy đủ. Thay vào đó, nó sẽ chỉ phục vụ một nội dung khác từ phía backend của website hoặc ứng dụng mà user không hề biết hoạt gì đang diễn ra. Ví dụ, chúng ta có thể nghĩ về việc trình duyệt gửi GET request để fetch nội dung cho \u0026ldquo;/index.html\u0026rdquo;, tuy nhiên có thể sửa đổi URL theo yêu cầu này và làm cho phía backend trả về nội dung từ \u0026ldquo;/index_rewrite.html\u0026rdquo;. Việc này về cơ bản sẽ cung cấp nội dung khác với yêu cầu ban đầu mà không cần server đưa user đến với URL/page hoàn toàn khác. Một số trường hợp sử dụng rewrite URL là các trường hợp cần phải sắp xếp lại các kí tự từ URL, trong trường hợp này, nó sẽ lấy content về và không thay đổi URL là rất quan trọng để trải nghiệm của user có thể đơn giản hơn và những trường hợp khác mà chúng ta sẽ tìm hiểu trong bài workshop này.\n"
},
{
	"uri": "/vi/",
	"title": "Using Edge Functions to handle Rewrites and Redirects",
	"tags": [],
	"description": "",
	"content": "Sử dụng Edge Functions để xử lí Rewrites và Redirects Tổng quan Trong bài workshop này, chúng ta sẽ tìm hiểu cách xử lí các trường hợp redirect và rewrite phổ biến bằng cách sử dụng các tính năng của Edge Compute được cung cấp bởi AWS.\nMục tiêu chính của việc này là cung cấp cho người xem kiến thức về cách sử dụng các tính năng của Edge Compute để áp dụng được redirects cho ứng dụng của họ và hiểu cách sử dụng các tính năng đó hiệu quả nhất.\nBài workshop này là nơi bạn sẽ thực hiện các bài labs sử dụng Compute platforms có sẵn trong CloudFront để tiếp cận được những trường hợp redirects và rewrites khác nhau. Ở đây chúng ta sẽ sử dụng Lambda@Edge vì những responses từ các trường hợp này là cacheable responses.\nPrerequisites Để hoàn thành bài workshop này, chúng ta cần có kiến thức về CDNs và kiến thức lập trình cơ bản JavaScript/Python để hiểu các đoạn code và những kiến thức xuyên suốt bài workshop.\nNội dung Giới thiệu Các bước chuẩn bị Xây dựng một serverless backend với AWS Lambda và AWS SAM Cấu hình cho API authorization: API Gateway Build và deploy ứng dụng web: AWS Amplify Chạy thử ứng dụng Cấu hình cho trính xuất metadata từ hình ảnh: Amazon Rekognition Dọn dẹp tài nguyên "
},
{
	"uri": "/vi/5-deploy/5.2-configapigateway/",
	"title": "Cấu hình API Gateway endpoint",
	"tags": [],
	"description": "",
	"content": "Sau khi chạy câu lệnh sam deploy --guided ở bước trước đó, bạn sẽ nhận được URL của API Gateway endpoint.\nỨng dụng web yêu cầu cấu hình cho endpoint này để nó có thể biết được nơi để gửi các request.\nCoppy URL của API Gateway endpoint của ứng dụng chúng ta, vào thư mục /webapp/src, mở file main.js. Paste URL đó vào giá trị của axios.defaults.baseURL như hình.\nHãy lưu ý rằng bạn đã coppy bao gồm tên của stage /v1 trong URL đó và xóa đi dấu / ở cuối URL.\nDòng Vue.config.productionTip = false sẽ tắt các tip được hiển thị trong Vue console, nó sẽ tối ưu hóa trong môi trường production.\nTiếp theo, chúng ta sẽ set mặc định URL cho tất cả Axios requests. Nó sẽ là endpoint URL nơi mà API request được gửi đến.\nTổng quát, đoạn code phía trên khởi tạo ứng dụng Vue.js bằng cách tạo một Vue instance, cấu hình base URL cho Axios requests. Nó cũng tắt các tip được hiển thị trong Vue console.\n"
},
{
	"uri": "/vi/1-introduce/1.2-edge/",
	"title": "Edge Compute",
	"tags": [],
	"description": "",
	"content": "Trước khi bắt tay vào thực hành bài lab, chúng ta nên hiểu cơ bản về loại edge compute capabilities mà chúng ta sẽ sử dụng trong bài lab này, hiện nay đang có sẵn trong CloudFront.\nCloudFront Edge Compute Features Lambda@Edge: Đây là một tính năng của Amazon CloudFront cho phép bạn chạy code gần hơn với users ứng dụng của chúng ta, giúp cải thiện hiệu suất và giảm độ trễ. Với Lambda@Edge, chúng ta không phải cung cấp hoặc quản lí cơ sở hạ tầng ở nhiều locations trên khắp thế giới. chúng ta chỉ trả phí cho thời gian compute mà chúng ta sử dụng và không tính phí khi code của chúng ta đang không sử dụng. Với Lambda@Edge, chúng ta có thể làm phong phú hơn các ứng dụng web của chúng ta bằng cách phân phối chúng trên toàn cầu và cải thiện hiệu suất của chúng - tất cả đều không cần server administration. Lambda@Edge chạy code của chúng ta để phản hồi các sự kiện được tạo ra bởi Amazon CloudFront content delivery network. Chỉ cần upload code của chúng ta lên AWS Lambda, ứng dụng này sẽ xử lí mọi thứ cần thể để run và scale code của chúng ta với tính khả dụng cao tại một AWS location gần với end user nhất của chúng ta.\nCloudFront Edge Compute Triggers Amazon CloudFront yêu cầu 4 loại event khác nhau để custom request và response được trao đổi giữa viewer và server (origin).\nViewer Request - Function này thực thi khi CloudFront nhận được request từ viewer và trước khi nó kiểm tra xem đối tượng được yêu cầu có trong edge cache hay không.\nOrigin Request - Function này chỉ thực thi khi CloudFront chuyển tiếp request đến origin của chúng ta. Khi request object nằm trong edge cache, function không được thực thi.\nOrigin Response - Function này thực thi sau khi CloudFront nhận được response từ origin và trước khi nó cache object trong response.\nViewer Response - Function thực thi trước khi trả lại requested object cho viewer. Function thực thi bất kể object đã có trong edge cache hay chưa.\nTất cả 4 trigger options trên đều khả dụng với Lambda@Edge trong khi chỉ có viewer triggers khả dung với CloudFront Functions. Đây là một trong những điểm khác biệt và quan trọng nhất giữa hai feature trên và chúng ta sẽ khám phá thêm về feature Lambda@Edge trong suốt bài workshop.\nCloudFront Edge Locations và Regional Edge Caches (RECs) CloudFront Edge Locations là những điểm hiện diện nơi các request của user sẽ được gửi đến dựa trên độ trễ thấp nhất đối với user gửi yêu cầu đó. Content của CloudFront Delivers được detect bằng những thứ mà Edge Location có thể phục vụ request và định tuyến users đến Edge Locations đã được xác định.\nRegional Edge Cache là middle tier caching layer nằm giữa Edge Location và Origin. Các Regional Edge Cache servers được dùng để cho phép nhiều content hơn được cache gần hơn với user.\nBiểu đồ sau đây biểu diễn cách nhóm Edge Locations và Regional Edge Cache được CloudFront sử dụng:\n"
},
{
	"uri": "/vi/3-cache/3.2-geored/",
	"title": "Geo Location Redirects",
	"tags": [],
	"description": "",
	"content": "Trường hợp này thường được dùng để redirect viewer đến country page của website của chúng ta. Ở sơ đồ dưới đây, chúng ta có thể thấy cấu trúc được build cho phần này.\nStep 1: Tạo CloudFront Cache policy để chuyển tiếp contry header: Để có thể Redirect user dựa vào contry location. Chúng ta cần đảm bảo rằng Contry Headeer liên kết với Lambda@Edge function. Để làm được điều này, chúng ta cần tạo Cache Policy nơi header được thêm vào cache key.\nĐến trang CloudFront Cache Policies console.\nỞ mục Custom Policies, click vào nút Create cache policy.\nỞ trang Create cache policy, đặt tên cho nó là edge-redirect-cache-policy. Ở phần Cache key settings, mở rộng phần Headers ra và chọn Include the following headers. Ở phần Add header, chúng ta tìm kiếm CloudFront-Viewer-Contry và chọn nó. Những mục khác chúng ta để mặc định và click vào nút Create. Step 2: Tạo Lambda@Edge function và publish new version Ở bước này, chúng ta sẽ làm như ở phần trước, tạo Lambda function với tên edge-geo-redirect và deploy nó. Sau đó, chúng ta cần publish new version của Lambda function vừa tạo.\nStep 3: Tạo CloudFront behavior cho trường hợp này Bây giờ Lambda function vừa được tạo và chúng ta phải assign nó cho một Cache Behavior trong CloudFront.\nĐi đến CloudFront console. Các bạn sẽ thấy Distribution được tạo ra bởi CloudFormation template, nó sẽ được xác định bởi Edge Redirect Workshop Distribution như ở mục Description.\nChọn Distribution đó sau đó chọn vào mục Behaviors.\nClick vào nút Create Behavior.\nỞ mục Path pattern, chúng ta nhập /geo.html. Ở dưới là phần Origin and origin groups, chúng ta chọn myS3Origin. Ở phần Viewer protocol policy, chúng ta chọn Redirect HTTP to HTTPS. Ở mục Cache key and origin requests, chúng ta chọn Cache policy and origin request policy, tiếp theo mở rộng mục Cache policy, chúng ta chọn policy vừa tạo ở bước trên edge-redirect-cache-policy. Những mục còn lại chúng ta sẽ để mặc định và click vào nút Create behavior ở cuối trang.\nStep 4: Kết hợp Lambda Function với CloudFront Behavior Chúng ta làm như ở trường hợp URI based Redirects ở trên, chúng ta sẽ kết hợp Lambda function edge-geo-redirect với CloudFront Behavior vừa tạo ở trên.\nStep 5: Set up clients cho testing Chúng ta sẽ cần một client để chạy curl commands. Cách dễ dàng đó là tạo CloudShell Environments. CloudShell là một shell có sẵn trong AWS console và chúng ta có thể chạy những Linux command từ nó. Đi đến CloudShell Console và chờ đến khi terminal sẵn sàng để dùng.\nNếu CloudShell không hoạt động thì nếu bạn đang thực hành bài workshop này ở Linux/MacOS client thì hai hệ điều hành này đã có sẵn curl và bạn chỉ cần chạy command ở client đó. Nếu bạn đang thực hành trên Windows thì hãy tận dùng online curl tools như cái này. Có thể chạy EC2 instance hoặc Cloud9 IDE từ AWS COnsole để chạy commands.\nStep 6: Test redirect configuration Đi đến CloudShell Console.\nTrong phần test, chúng ta sẽ chạy câu lệnh curl để gửi http request đối với distrubtion của chúng ta, để làm như vậy, chúng ta cần copy Distribution domain name từ CloudFront console nơi chúng ta có thể tìm thấy.\nKhi đã tìm thấy distribution domain name, copy câu lệnh sau và thay thế domain name của chúng ta vào.\ncurl -v -o /dev/null https://\u0026lt;YOUR-DISTRIBUTION-DOMAIN-NAME\u0026gt;/geo.html Sau khi build câu lệnh trên từ cloudshell, chúng ta sẽ thấy kết quả như dưới đây. "
},
{
	"uri": "/vi/6-test/6.2-logandmonitor/",
	"title": "Logging và Monitoring",
	"tags": [],
	"description": "",
	"content": "Logging Centralized logging cho chúng ta 2 lợi ích quan trọng. Đầu tiên các log được ghi lại được lưu trữ trong một nơi duy nhất và được format theo một tiêu chuẩn nhất định, giúp chúng ta đơn giản trong việc quản lí các tasks và phân tích logs. Thứ hai, nó cung cấp cho chúng ta một nơi lưu trữ an toàn cho dữ liệu của các logs của chúng ta.\nTrong AWS Lambda, service logging mặc định là Amazon CloudWatch.\nLambda tự động truyền thông tin về các lúc gọi function, cùng với các logs và output từ code của functions của chúng ta sang CloudWatch Logs.\nCác nhóm log là một phần tiêu chuẩn của CloudWatch và được dùng để phân loại các logs. Bất kì các logs được tạo bởi Lambda function đều có quy ước đặt tên là /aws/lambda/function-name. Một nhóm log là một tập hợp các log streams, bạn có thể xem chi tiết nó trong CloudWatch console.\nNhập CloudWatch ở thanh tìm kiếm service trên AWS Console sau đó chọn CloudWatch. Ở thanh điều hướng bên trái, chọn Log groups. Chọn log group với function CreateTaskFunction. Mỗi phiên bản của một Lambda function có một stream log riêng. Nếu một function được mở rộng thì phiên bản mới đó đồng thời có log stream riêng. Mỗi khi một environment được chọn để thực thi và một environment mới được tạo ra để đáp ứng một lượng invocation nhất định và nó sẽ tạo ra một log stream mới. Cách đặt tên cho các log streams là YYYY/MM//DD [Function version] [Execution environment GUID]\nVí dụ, đây là log stream của function CreateTaskFunction.\nTrong những logs trên này có:\nRequestId: là một ID duy nhất được tạo ra cho mỗi lần gọi function. Nếu Lambda function gọi lại request thì ID này sẽ không thay đổi và giữ nguyên trong logs cho mỗi lần gọi lại tiếp theo. Start/End: các giá trị này đánh dấu một invocation, vì vậy những dòng log ở giữa các giá trị này đều thuộc về chung một invocation. Duration: thời gian thực thi của function. Billed Duration: phép toán làm tròn cho Duration. Memory Size: kích thước bộ nhớ được cấp phát cho function. Max Memory Used: kích thước bộ nhớ tối đa được sử dụng trong quá trình thực thi function. Init Duration: thời gian tính từ khi chạy phần INIT. Monitoring Metrics là dữ liệu số đo ở các khoảng thời gian khác nhau (time series data) và chỉ số service-level (request rate, error rate, duration, CPU, etc). Lambda tự động publish một lượng metrics cho Lambda functions.\nĐể theo dõi và quan sát các Lambda functions, các metrics quan trọng nhất là:\nErrors: Liệu rằng errors có phải do logic hoặc do runtime trong code hoặc do tương tác lỗi với Lambda service hoặc các services khác gây ra hay không. Những thứ này đều có thể do các yếu tố khác gây ra, chẳng hạn như là không được cấp quyền hoặc vượt quá resource limit. Excution time: Đo thời gian response chỉ cho chúng ta cái nhìn hạn chế về hiệu suất trong distributed applications. Điều quan trọng là nắm bắt và theo dõi hiệu suất ở các khoảng phần trăm (chẳng hạn như 95% và 99%) để đo lường hiệu suất cho ít nhất 5% và 1% requests. Throttling: Ứng dụng serverless sử dụng resource có thể mở rộng với Service Quotas để bảo đảm cho khách hàng. Throttling có thể cho chúng ta biết quotas được thiết lập không chính xác, có lỗi trong cấu trúc của hệ thống hoặc mức lưu lượng truy cập vượt quá giới hạn. Tất cả Lambda functions tự động tích hợp với CloudWatch. Lambda tự động ghi lại nhiều metrics, nó luôn được publish lên CloudWatch metrics. Nếu bạn điều huwosng đến một function trong Lambda, phần Monitor của mục Metrics cho chúng ta xem nhanh về các CloudWatch metrics được tích hợp với một function.\nĐể có thể vào xem Mornitor, hãy vào Lambda console, chọn Lambda function mà bạn muốn xem. Vào thẻ Monitor, ở phần Metrics, chúng ta có thể xem các metrics của function. Xem minh họa ở hình bên dưới.\nTiếp theo, chúng ta sẽ thêm tính năng mới vào ứng dụng web của chúng ta với Amazon Rekognition.\n"
},
{
	"uri": "/vi/2-prerequiste/",
	"title": "Solution Deployment",
	"tags": [],
	"description": "",
	"content": "Cách làm này sẽ thực hiện việc tạo ra các services để phục vụ cho bài workshop này. Các services này sẽ được tạo ra bằng cách sử dụng AWS CloudFormation. AWS CloudFormation là một dịch vụ của AWS giúp chúng ta tự động hóa việc triển khai các tài nguyên của AWS. Chúng ta sẽ sử dụng AWS CloudFormation để tạo ra CloudFront distribution, Amazon S3 Bucket và IAM Role.\nHãy cùng deploy template này như dưới đây:\nKhởi chạy CloudFormation template này, chúng ta sẽ nhận được một giao diện như sau: Ở trong trang này, lướt xuống phần Capabilities, chọn vào ô \u0026ldquo;I acknowledge that AWS CloudFormation might create IAM resources with custom names.\u0026rdquo; và nhấn vào nút Create stack. Sẽ mất vài phút để stack này được tạo ra thành công. Bạn sẽ thấy tương tự như hình bên dưới. Tiếp tục, hãy tải file html (sẽ phục vụ cho Origin của chúng ta). Tải ở đây. Lưu trữ nó ở máy của chúng ta và giải né. File này sẽ bao gồm file html mà chúng ta sẽ sử dụng cho Origin content. Bây giờ chúng ta hãy di chuyển sang trang S3 bucket. Chúng ta sẽ thấy S3 bucket được tạo ra bởi CloudFormation template của chúng ta. Click vào S3 bucket đó, click vào nút Upload. Click vào nút Add files, chọn file html đã tải ở trên và tải file đó lên S3 bucket của chúng ta. Vậy là chúng ta vừa hoàn thành xong việc cài đặt môi trường. Bây giờ chúng ta có thể bắt đầu thực hành với bài workshop của chúng ta.\nChúng ta có thể deploy resource của chúng ta theo cách khác đó là CDK Project. Chúng ta sẽ dùng CloudShell ở AWS Region us-east-1. Tải file CDK project dưới dạng zip ở đường dẫn này. Và đọc tài liệu hỗ trợ cho deploy CDK project ở đây.\nHãy cùng xem lại tất cả resources được deploy để hiểu hơn về bài workshop của chúng ta. Rồi hãy cùng bắt tay vào thực hành.\n"
},
{
	"uri": "/vi/3-cache/3.3-devicered/",
	"title": "Device Redirects",
	"tags": [],
	"description": "",
	"content": "AWS Lambda là gì? AWS Lambda là một dịch vụ serverless nó sẽ thực thi những dòng code mà không cần phải chuẩn bị và quản lí servers. Lambda tự động phân bổ dung lượng máy tính và chạy code của bạn dựa vào những yêu cầu hoặc sự kiện được gửi đến trong tất cả các môi trường, các điều kiện.\nCách nó hoạt động:\nTải code của bạn lên AWS Lambda hoặc viết code trên trình chỉnh sửa của Lambda. (Trong workshop này, chúng ta sẽ viết code và tải lên bằng SAM) Cài đặt code của bạn cho phép trigger từ những AWS services khác, từ HTTP endpoints, hay là những hoạt động xảy ra bên trong ứng dụng. AWS Lambda sẽ thực thi code của bạn khi trigger được kích hoạt, sau đó nó sẽ tự động quản lí tài nguyên tính toán cho code của bạn. Chỉ trả tiền cho thời gian thực thi code của bạn (và số lượng tài nguyên tính toán mà code của bạn sử dụng). Phân tích một Lambda function Lambda function handler là một hàm trong code của bạn, nó sẽ xử lí các events. Khi một chức năng được gọi, Lambda sẽ thực thi hàm handler. Khi hàm handler kết thúc và return response, nó sẽ sẵn sàng thực hiện những events khác.\nVí dụ về cấu trúc của Lambda function:\nexports.handler = async (event) =\u0026gt; {\r// TODO implement\rconst response = {\rstatusCode: 200,\rbody: JSON.stringify(\u0026#39;Hello from Lambda!\u0026#39;),\r};\rreturn response;\r}; Ở đây, event là request được gửi đến và response là kết quả trả về.\nTạo Lambda function Truy cập đến đường dẫn sam/src/handlers/createTask và chọn file tên là app.js, coppy và paste đoạn code sau vào file:\nconst { DynamoDBClient } = require(\u0026#39;@aws-sdk/client-dynamodb\u0026#39;)\rconst { DynamoDBDocumentClient, PutCommand } = require(\u0026#39;@aws-sdk/lib-dynamodb\u0026#39;)\rconst uuid = require(\u0026#39;uuid\u0026#39;)\rconst ddbClient = new DynamoDBClient()\rconst ddbDocClient = DynamoDBDocumentClient.from(ddbClient)\rconst tableName = process.env.TASKS_TABLE\rexports.handler = async (event) =\u0026gt; {\rconsole.info(\u0026#39;received:\u0026#39;, event)\rconst body = JSON.parse(event.body)\rconst user = event.requestContext.authorizer.principalId\rconst id = uuid.v4()\rconst title = body.title\rconst bodyText = body.body\rconst createdAt = new Date().toISOString()\rlet dueDate = createdAt\rif (\u0026#39;dueDate\u0026#39; in body) {\rdueDate = body.dueDate\r}\rconst params = {\rTableName: tableName,\rItem: { user: `user#${user}`, id: `task#${id}`, title: title, body: bodyText, dueDate: dueDate, createdAt: createdAt }\r}\rconsole.info(`Writing data to table ${tableName}`)\rconst data = await ddbDocClient.send(new PutCommand(params))\rconsole.log(\u0026#39;Success - item added or updated\u0026#39;, data)\rconst response = {\rstatusCode: 200,\rheaders: {\r\u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;\r},\rbody: JSON.stringify(data)\r}\rreturn response\r} Đoạn code này đã import thư viện AWS SDK cho DynamoDB, thư viện uuid cho việc nhận dạng, cài đặt DynamoDB client.\nLambda function được khởi tạo với exports.handler, nó đóng vai trò như một entry point của function. Nó lấy object envent làm tham số đầu vào và trả về một object response.\nNó tạo ra object params với những yếu tố cần thiết, bao gồm tên của DynamoDB table, thuộc tính của item trong table (user, id, title, bodyText, dueDate, createdAt).\nFunction ghi lại dữ liệu vào DynamoDB table bằng PutCommand và logs ra lời nhắn thành công.\nResponse sẽ trả về một object với statusCode là 200, đặt headers với CORS và body là dữ liệu được ghi lại.\nTóm lại, Đoạn code này phục vụ cho việc tạo và cập nhật task trong DynamoDB table dựa vào việc gửi request API. Nó tận dụng AWS SDK dành cho DynamoDB, Node.js và AWS Lambda để cung cấp giải pháp quản lý tác vụ của serverless và mở rộng quy mô.\nThêm Lambda function vào SAM template Coppy và paste đoạn code dưới đây vào mục Resource trong file template.yml, sau function TasksTable.\nCú pháp trong YAML có phân biệt khoảng trắng, vì vậy hãy chắc chắn rằng phạm vi của function CreateTaskFunction được thụt lề vào sâu hơn so với phạm vi của Resources.\nGiá trị AWS::Serverless::Function được dùng để khởi tạo Lambda function. Thuộc tính CodeUri được dùng để xác định rõ vị trí của file app.js trong thư mục src/handlers/createTask.\n# CreateTask Lambda Function\rCreateTaskFunction:\rType: AWS::Serverless::Function\rProperties:\rCodeUri: src/handlers/createTask\rHandler: app.handler\rPolicies:\r- DynamoDBCrudPolicy:\rTableName: !Ref TasksTable\rEnvironment:\rVariables:\rTASKS_TABLE: !Ref TasksTable\rEvents:\rPostTaskFunctionApi:\rType: Api\rProperties:\rRestApiId: !Ref TasksApi\rPath: /tasks\rMethod: POST\rAuth:\rAuthorizer: MyLambdaTokenAuthorizer Chi tiết và công dụng của các thuộc tính được khai báo ở trên các bạn có thể xem lại ở phần này.\nHãy làm như hình bên dưới.\n"
},
{
	"uri": "/vi/5-deploy/5.3-initializeamplify/",
	"title": "Khởi tạo Amplify",
	"tags": [],
	"description": "",
	"content": "Bước này, chúng ta sẽ set up Amplify để có thể khởi tạo những service cần thiết cho phần backend của ứng dụng. Chúng ta sẽ đi cấu hình cho Amplify hosting.\nChạy lệnh sau để vào thư mục root của web project (/webapp):\ncd ~/environment/serverless-tasks-webapp/webapp Chúng ta khởi tạo Amplify:\namplify init Chúng ta sẽ đặt tên cho project là tasks và nhấn Enter để tiếp tục. Nó sẽ hiện ra những thông tin về project.\nTiếp theo, nó sẽ hỏi chúng ta có muốn khởi tạo project với những thông tin như trên hay không thì nhập Y và nhấn Enter.\nSau đó, nó sẽ hỏi chúng ta chọn cách xác thực mà chúng ta muốn, chúng ta chọn AWS profile và nhấn Enter. Và chọn profile mặc định mà chúng ta đã cấu hình ở bước trước đó.\nChúng ta sẽ làm như hình dưới đây.\nCLI có thể tự xác định được cấu hình phù hợp với project mà Amplify được khởi tạo. Trong workshop này, CLI biết chúng ta đang sử dụng Vue.js và cung cấp cấu hình phù hợp với app type, framework, source, distribution, build và start options.\nKhi chúng ta khởi tạo project Amplify mới, sẽ có một vài thứ thay đổi:\nNó sẽ tạo ra một thư mục mới có tên là amplify trong thư mục root của project và chứa những khởi tạo của backend. Nó tạo ra một file tên là aws-exports.js trong thư mục src của project. File này chứa những thông tin cấu hình cần thiết cho những services mà bạn tạo ra với Amplify, đây là cách mà người dùng Amplify có thể lấy những thông tin cần thiết của những backend services. Những cloud project được tạo ra trong AWS Amplify Console có thể được truy cập bằng cách chạy lệnh amplify console. Console cung cấp danh sách các môi trường backend, những resources được thực thi trong Amplify category, trang trái hiện tại của deployments và những thông tin khác. Quá trình khởi tạo Amplify hoàn thành, chúng ta sẽ nhận được thông báo như hình dưới đây.\nBây giờ, ứng dụng Vue.js đã được thiết lập và Amplify đã được khởi tạo, chúng ta đã sẵn sàng để sử dụng Amplify hosting ở bước tiếp theo.\n"
},
{
	"uri": "/vi/3-cache/",
	"title": "Trường hợp cho Cacheable",
	"tags": [],
	"description": "",
	"content": "Xử lí Redirects bằng Lambda@Edge Trong phần này, chúng ta sẽ đề cập đến trường hợp có thể được cached. Lý tưởng nhất là các trường hợp này sẽ được xử lí bằng cách sử dụng Lambda@Edge.\nNhư đã nhắc đến trong phần Edge Compute Introduction, có nhiều triggers có sẵn cho Lambda@Edge, các trường hợp sẽ được giải quyết bằng cách sử dụng Origin facing event triggers.\nLambda@Edge Functions đang sử dụng Origin facing triggers sẽ được trigger sau khi request được đánh evaluate ở CloudFront Caching Layers, do đó, nếu có một response đã được cache thì một response sẽ được back lại viewer, tiết kiệm function invocations. Điều này không chỉ tăng tốc độ phản hồi mà còn giúp giảm chi phí redirects của chúng ta vì Lambda sẽ chỉ được kích hoặc nếu không có response nào được cached.\nNội dung Khai báo Table trong DynamoDB Tạo Lambda function "
},
{
	"uri": "/vi/5-deploy/5.4-buildapp/",
	"title": "Build ứng dụng web",
	"tags": [],
	"description": "",
	"content": "\rĐầu tiên, hãy đảm bảo rằng bạn đang ở thư mục gốc của project (/webapp)\ncd ~/environment/serverless-tasks-webapp/webapp Tiếp theo, cài đặt các dependencies cần thiết cho project bằng lệnh sau:\nnpm install Chúng ta sẽ thấy như hình sau khi cài đặt xong:\nBỏ qua những cảnh báo về bảo mật khi chạy câu lệnh npm install trong phạm vi buổi workshop này. Trong môi trường production thực tế, chúng ta sẽ xử lí chúng trước đó.\nSau khi cài đặt xong, chúng ta sẽ build ứng dụng web bằng lệnh sau:\nnpm run build Nếu build thành công, chúng ta sẽ nhận được như này:\n"
},
{
	"uri": "/vi/4-apigateway/",
	"title": "Cấu hình cho API authorization: API Gateway",
	"tags": [],
	"description": "",
	"content": "Lambda Authorizer là gì? Lambda authorizer là một tính năng của API Gateway mà nó sử dụng Lambda function để kiểm soát truy cập tới API của bạn. Đó là một cách để bổ sung bảo mật cho API của bạn.\nLambda Authorizer hoạt động như thế nào? Khi client gửi request đến một trong những chức năng của API thì API Gateway sẽ gọi đến Lambda authorizer để xác thực client và trả về IAM policy để kiểm tra client đó có được quyền truy cập hay không.\nAPI Gateway hỗ trợ các tiêu chuẩn mở cho các cách xác thực như OAuth và SAML.\nThông thường, intentity provider được sử dụng để xác thực người gửi request đến API. Identity provider phải chịu trách nhiệm xác minh và trả về danh tính của người đó. Sau đó, nó sẽ được chuyến đền Lambda authorizer, nơi chịu trách nhiệm kiểm soát quyền truy cập API của bạn.\nTrong workshop này, chúng ta sẽ không triển khai identity provided, vì vậy, thay vào đó, chúng ta sẽ mock identity provider.\nJSON Web Token (JWT) Danh tính của người gọi API sẽ được biểu diễn bằng một JSON Web Token (JWT). Theo wikipedia, \u0026ldquo;A JWT is a compact, self-contained, signed JSON object. The JWT is typically used to represent an authenticated user\u0026rsquo;s identity.\u0026rdquo;\nExample JWT Một JWT token bao gồm 3 phần: header, payload và signature. Phần header và payload là những đối tượng dạng JSON. Phần signature là một chuỗi kí tự được sử dụng để xác thực phần header và payload.\nHeader: Loại token (typ) là JWT. Thuật toán (alg) là HS256, là sự kết hợp giữa HMAC cùng với SHA-256\n{\r\u0026#34;typ\u0026#34;: \u0026#34;JWT\u0026#34;,\r\u0026#34;alg\u0026#34;: \u0026#34;HS256\u0026#34;\r} Payload: Thuộc tính iss là tên của identity provider. Thuộc tính sub là tên của người gửi request. Thuộc tính scope là quyền của người gửi request. Thuộc tính jti là unique identifier cho JWT. Thuộc tính iat là thời gian mà token được tạo ra. Thuộc tính exp là thời gian mà token hết hạn.\n{\r\u0026#34;iss\u0026#34;: \u0026#34;getting-started-with-serverless\u0026#34;,\r\u0026#34;sub\u0026#34;: \u0026#34;minhnghia\u0026#34;,\r\u0026#34;scope\u0026#34;: \u0026#34;admins\u0026#34;,\r\u0026#34;jti\u0026#34;: \u0026#34;02343566e-8ff3-4a2d-ac18-c4d28ed96881\u0026#34;,\r\u0026#34;iat\u0026#34;: 1633433217,\r\u0026#34;exp\u0026#34;: 4070208800\r} Signature: R2D2RfY_n7OAcuONbpPfxqBY5IppEiGLCCfeQ_wz_2w Các giá trị này đều được mã hóa dạng base64 và nối với form của JWT bằng dấu \u0026ldquo;.\u0026rdquo;, ví dụ như sau:\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dnZWRJbkFzIjoiYWRtaW4iLCJpYXQiOjE0MjI3Nzk2Mzh9.gzSraSYS8EXBxLN_oWnFSRgCzcmJmMjLiuyu5CSpyHI Bạn sẽ thấy token được gửi đến API Gateway endpoint bằng ứng dụng web và sử dụng HTTP Authorization header.\nCấu hình Lambda Authorizer Coppy đoạn code dưới đây và paste vào file app.js trong thư mục sam/src/auth.\nconst jwt = require(\u0026#39;njwt\u0026#39;)\rexports.handler = function (event, context, callback) {\rconsole.info(\u0026#39;received:\u0026#39;, event)\rconst token = event.authorizationToken.split(\u0026#39; \u0026#39;)[1]\rjwt.verify(token, \u0026#39;secretphrase\u0026#39;, (err, verifiedJwt) =\u0026gt; {\rif (err) {\rconsole.log(err.message)\rcallback(\u0026#39;Error: Invalid token\u0026#39;)\r} else {\rconsole.log(`Verified token: ${verifiedJwt}`)\rconst resource = `${event.methodArn.split(\u0026#39;/\u0026#39;, 2).join(\u0026#39;/\u0026#39;)}/*`\rconst policy = generatePolicy(verifiedJwt.body.sub, \u0026#39;Allow\u0026#39;, resource)\rconsole.log(`Generated policy: ${JSON.stringify(policy)}`)\rcallback(null, policy)\r}\r})\r}\rconst generatePolicy = function (principalId, effect, resource) {\rconst authResponse = {}\rauthResponse.principalId = principalId\rif (effect \u0026amp;\u0026amp; resource) {\rconst policyDocument = {}\rpolicyDocument.Version = \u0026#39;2012-10-17\u0026#39;\rpolicyDocument.Statement = []\rconst statementOne = {}\rstatementOne.Action = \u0026#39;execute-api:Invoke\u0026#39;\rstatementOne.Effect = effect\rstatementOne.Resource = resource\rpolicyDocument.Statement[0] = statementOne\rauthResponse.policyDocument = policyDocument\r}\rauthResponse.context = {\ruserId: 1,\rcreatedAt: new Date().toISOString()\r}\rreturn authResponse\r} Đoạn code phía trên sẽ xác minh và xác thực những request được gửi đến API bằng cách sử dụng JSON Web Token (JWT) và trả về một IAM policy cho người được xác thực đó.\nBắt đầu, chúng ta sẽ import thư viện njwt, nó được dùng cho xác thực JWT.\nexports.handler là entry point của Lambda function. Nó sẽ nhận vào một event, một context và một callback. Event chứa các thông tin về request gửi đến API. Context chứa các thông tin về Lambda function. Callback sẽ được gọi khi Lambda function hoàn thành.\nJWT token được trích xuất từ authorizationToken trong phần header của request. Sẽ có một phương thức phân tách được sử dùng để xóa tiền tố Bearer và truy xuất mã token thực sự.\nHàm jwt.verify được sử dụng để xác minh token bằng cách sử dụng secretphrase. Nếu token không hợp lệ, Lambda function sẽ trả về một lỗi. Nếu token hợp lệ, object JWT được xác thực đó sẽ được lấy đi và xử lí.\nBiến resource được đặt để đại diện cho những resource được yêu cầu từ API request.\nHàm generatePolicy được sử dụng để tạo ra một IAM policy. Nó sẽ lấy giá trị của sub (subject) từ body của JWT, chuyển effect thành Allow và sử dụng biến resource để làm rõ policy đó.\nTóm lại, đoạn code ở trên là một phương thức xác thực đơn giản dựa vào token, nó dùng để mô tả cách sử dụng token để xác thực request. Token được truyền bằng header của Authorization. Sau đó chúng ta sẽ xác minh token bằng cách sử dụng (secretphrase). Đó là một passphrase rất phổ biến, được áp dụng trong ứng dụng web. Chúng ta chỉ đơn giản là mock identity provider. Trong thực tế, chúng ta sẽ sử dụng một identity provider uy tín, chẳng hạn như Amazon Cognito, để xác minh danh tính của người dùng.\nIAM Policy Document Đây là ví dụ về IAM policy document được trả về tới người gọi. Ở đây, principal minhnghia được cấp quyền truy cập đến các method của API Gateway.\n{\r\u0026#34;principalId\u0026#34;: \u0026#34;minhnghia\u0026#34;,\r\u0026#34;policyDocument\u0026#34;: {\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Action\u0026#34;: \u0026#34;execute-api:Invoke\u0026#34;,\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:execute-api:us-east-1:0123456789012:dn3fidb5ng0/v1/*\u0026#34;\r}\r]\r},\r\u0026#34;context\u0026#34;: {\r\u0026#34;userId\u0026#34;: 1,\r\u0026#34;createdAt\u0026#34;: \u0026#34;2021-10-01T19:53:34.594Z\u0026#34;\r}\r} principalId đại diện cho indentify của người dùng được gán với request. Trong đoạn code này, nó được gán giá trị minhnghia, IAM policy này được gán với người dùng này cùng identifier là minhnghia.\nobject policyDocument xác định quyền được gán trong policy. Version là phiên bản của ngôn ngữ viết policy đang được sử dụng hiện tại là 2012-10-17. Statement là một mảng các quyền được gán cho người dùng. Trong đoạn code này, nó chỉ có một quyền duy nhất là execute-api:Invoke. Effect là một trong hai giá trị Allow hoặc Deny. Resource là một định danh duy nhất cho một resource cụ thể. Trong đoạn code này, nó là một định danh cho một API Gateway endpoint.\ncontext là một object chứa các thông tin bổ sung về người dùng. Nó có thể được sử dụng để truyền các thông tin bổ sung về người dùng đến Lambda function. Trong đoạn code này, nó chứa hai thông tin là userId và createdAt. Cái này có lợi trong việc debugging và kiểm tra các request của người dùng đó.\n"
},
{
	"uri": "/vi/3-cache/3.4-urirew/",
	"title": "URI based Rewrites",
	"tags": [],
	"description": "",
	"content": "AWS Lambda là gì? AWS Lambda là một dịch vụ serverless nó sẽ thực thi những dòng code mà không cần phải chuẩn bị và quản lí servers. Lambda tự động phân bổ dung lượng máy tính và chạy code của bạn dựa vào những yêu cầu hoặc sự kiện được gửi đến trong tất cả các môi trường, các điều kiện.\nCách nó hoạt động:\nTải code của bạn lên AWS Lambda hoặc viết code trên trình chỉnh sửa của Lambda. (Trong workshop này, chúng ta sẽ viết code và tải lên bằng SAM) Cài đặt code của bạn cho phép trigger từ những AWS services khác, từ HTTP endpoints, hay là những hoạt động xảy ra bên trong ứng dụng. AWS Lambda sẽ thực thi code của bạn khi trigger được kích hoạt, sau đó nó sẽ tự động quản lí tài nguyên tính toán cho code của bạn. Chỉ trả tiền cho thời gian thực thi code của bạn (và số lượng tài nguyên tính toán mà code của bạn sử dụng). Phân tích một Lambda function Lambda function handler là một hàm trong code của bạn, nó sẽ xử lí các events. Khi một chức năng được gọi, Lambda sẽ thực thi hàm handler. Khi hàm handler kết thúc và return response, nó sẽ sẵn sàng thực hiện những events khác.\nVí dụ về cấu trúc của Lambda function:\nexports.handler = async (event) =\u0026gt; {\r// TODO implement\rconst response = {\rstatusCode: 200,\rbody: JSON.stringify(\u0026#39;Hello from Lambda!\u0026#39;),\r};\rreturn response;\r}; Ở đây, event là request được gửi đến và response là kết quả trả về.\nTạo Lambda function Truy cập đến đường dẫn sam/src/handlers/createTask và chọn file tên là app.js, coppy và paste đoạn code sau vào file:\nconst { DynamoDBClient } = require(\u0026#39;@aws-sdk/client-dynamodb\u0026#39;)\rconst { DynamoDBDocumentClient, PutCommand } = require(\u0026#39;@aws-sdk/lib-dynamodb\u0026#39;)\rconst uuid = require(\u0026#39;uuid\u0026#39;)\rconst ddbClient = new DynamoDBClient()\rconst ddbDocClient = DynamoDBDocumentClient.from(ddbClient)\rconst tableName = process.env.TASKS_TABLE\rexports.handler = async (event) =\u0026gt; {\rconsole.info(\u0026#39;received:\u0026#39;, event)\rconst body = JSON.parse(event.body)\rconst user = event.requestContext.authorizer.principalId\rconst id = uuid.v4()\rconst title = body.title\rconst bodyText = body.body\rconst createdAt = new Date().toISOString()\rlet dueDate = createdAt\rif (\u0026#39;dueDate\u0026#39; in body) {\rdueDate = body.dueDate\r}\rconst params = {\rTableName: tableName,\rItem: { user: `user#${user}`, id: `task#${id}`, title: title, body: bodyText, dueDate: dueDate, createdAt: createdAt }\r}\rconsole.info(`Writing data to table ${tableName}`)\rconst data = await ddbDocClient.send(new PutCommand(params))\rconsole.log(\u0026#39;Success - item added or updated\u0026#39;, data)\rconst response = {\rstatusCode: 200,\rheaders: {\r\u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;\r},\rbody: JSON.stringify(data)\r}\rreturn response\r} Đoạn code này đã import thư viện AWS SDK cho DynamoDB, thư viện uuid cho việc nhận dạng, cài đặt DynamoDB client.\nLambda function được khởi tạo với exports.handler, nó đóng vai trò như một entry point của function. Nó lấy object envent làm tham số đầu vào và trả về một object response.\nNó tạo ra object params với những yếu tố cần thiết, bao gồm tên của DynamoDB table, thuộc tính của item trong table (user, id, title, bodyText, dueDate, createdAt).\nFunction ghi lại dữ liệu vào DynamoDB table bằng PutCommand và logs ra lời nhắn thành công.\nResponse sẽ trả về một object với statusCode là 200, đặt headers với CORS và body là dữ liệu được ghi lại.\nTóm lại, Đoạn code này phục vụ cho việc tạo và cập nhật task trong DynamoDB table dựa vào việc gửi request API. Nó tận dụng AWS SDK dành cho DynamoDB, Node.js và AWS Lambda để cung cấp giải pháp quản lý tác vụ của serverless và mở rộng quy mô.\nThêm Lambda function vào SAM template Coppy và paste đoạn code dưới đây vào mục Resource trong file template.yml, sau function TasksTable.\nCú pháp trong YAML có phân biệt khoảng trắng, vì vậy hãy chắc chắn rằng phạm vi của function CreateTaskFunction được thụt lề vào sâu hơn so với phạm vi của Resources.\nGiá trị AWS::Serverless::Function được dùng để khởi tạo Lambda function. Thuộc tính CodeUri được dùng để xác định rõ vị trí của file app.js trong thư mục src/handlers/createTask.\n# CreateTask Lambda Function\rCreateTaskFunction:\rType: AWS::Serverless::Function\rProperties:\rCodeUri: src/handlers/createTask\rHandler: app.handler\rPolicies:\r- DynamoDBCrudPolicy:\rTableName: !Ref TasksTable\rEnvironment:\rVariables:\rTASKS_TABLE: !Ref TasksTable\rEvents:\rPostTaskFunctionApi:\rType: Api\rProperties:\rRestApiId: !Ref TasksApi\rPath: /tasks\rMethod: POST\rAuth:\rAuthorizer: MyLambdaTokenAuthorizer Chi tiết và công dụng của các thuộc tính được khai báo ở trên các bạn có thể xem lại ở phần này.\nHãy làm như hình bên dưới.\n"
},
{
	"uri": "/vi/5-deploy/",
	"title": "Build và deploy ứng dụng web: AWS Amplify",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong bước này, bạn sẽ xây dựng và triển khai ứng dụng serverless sử dụng SAM. Tiếp đó, bạn sẽ cấu hình ứng dụng web để tương tác với API Gateway endpoint. Sau đó, bạn sẽ build ứng dụng web và cấu hình AWS Amplify để host các static resource cho ứng dụng web của bạn.\nNội dung Deploy Serverless Application Cấu hình API Gateway endpoint Khởi tạo Amplify Build ứng dụng web Thêm Amplify Hosting vào ứng dụng Deploy ứng dụng "
},
{
	"uri": "/vi/5-deploy/5.5-amplifyhosting/",
	"title": "Thêm Amplify Hosting vào ứng dụng",
	"tags": [],
	"description": "",
	"content": "Chúng ta đã thành công build ứng dụng với Amplify! Bây giờ sau khi build xong, chúng ta sẽ deploy nó lên web bằng Amplify Console.\nTất cả static resource của ứng dụng web bao gồm HTML, CSS, JavaScript, images và những file khác sẽ được quản lí bởi AWS Amplify Console. Người dùng sẽ truy cập vào ứng dụng thông qua URL public được cấp bởi Amplify Console. Bạn không cần khởi chạy bất kì web servers hoặc những services khác để làm cho ứng dụng của bạn hoạt động.\nTrong thực tế, bạn sẽ sử dụng custom domain để làm chủ ứng dụng. Nếu bạn muốn sử dụng domain của bạn, hãy theo dõi cách thiết lập custom domain trên Amplify\nChạy câu lệnh dưới đây để thêm Amplify Hosting vào ứng dụng web của bạn:\namplify add hosting Khi nó hỏi bạn chọn plugin để thực thi, hãy chọn Hosting with Amplify Console. Tiếp đến, chọn phương thức deployment, các bạn hãy chọn Manual deployment. Vậy là chúng ta đã thêm Amplify Hosting vào ứng dụng web của mình, các bạn tham khảo hình bên dưới.\nTiếp theo, chúng ta sẽ publish ứng dụng lên web.\n"
},
{
	"uri": "/vi/6-test/",
	"title": "Chạy thử ứng dụng",
	"tags": [],
	"description": "",
	"content": "\nSau khi đăng nhập với bất kì username hay password nào, bạn có thể tạo task mới bằng cách nhập Title và Body. Phần Due date có thể để trống.\nNhấn Create để tạo task mới, nó sẽ được hiển trị trong phần My Tasks.\nNhư các bạn sẽ thấy ở hình bên dưới.\nKhi bạn click vào nút Create task, sẽ có những thứ hoạt động:\nRequest với phương thức POST được gửi đến API Gateway endpoint /tasks. Request đó được xác thực bởi Lambda authorizer, sử dụng HTTP header Authentication: Bearer \u0026lt;token\u0026gt;. Body của request đó được chuyển đến Lambda function CreateTaskFunction. Những thông tin của task được nhập ở trên sẽ được lưu trữ ở DynamoDB table. Sẽ có phản hồi với HTTP status code 200 được trả về ứng dụng web. Ứng dụng web refresh lại danh sách các tasks bởi vì request với phương thức GET được gửi đến API Gateway endpoint /tasks. Lại lần nữa, request đó được xác thực bởi Lambda authorizer và chuyển đến Lambda function GetTasksFunction. Lambda function GetTasksFunction truy xuất danh sách các task từ DynamoDB table và trả về danh sách các task đó cho người dùng đã được xác thực. Hãy tạo thêm nhiều tasks mới và thử xóa một task để hiểu rõ hơn về quy trình request được xử lí.\nNội dung Quản lí dữ liệu trong DynamoDB Logging và Monitoring "
},
{
	"uri": "/vi/5-deploy/5.6-deployapp/",
	"title": "Deploy ứng dụng",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ publish ứng dụng với amplify bằng câu lệnh sau:\namplify publish Và nếu các bạn nhận được output giống như hình, các bạn đã deploy thành công ứng dụng của mình lên web.\nSau khi publish, ở cuối trang terminal sẽ hiển thị URL của app chúng ta với domain amplifyapp.com\nBạn có thể đăng nhập với bất kì username và password nào mà bạn muốn bởi vì chưa có phần xác thực ở phía backend.\nNếu bạn muốn tìm hiểu cách thêm xác thực vào ứng dụng của mình, hãy truy cập tại đây\nTrang chính của ứng dụng chúng ta sẽ trông như thế này.\nBất cứ khi nào chúng ta muốn thay đổi gì ở ứng dụng và publish nó, chỉ cần chạy lại câu lệnh amplify publish. Chúng ta sẽ không cần modify ứng dụng web, chỉ cần modify ở SAM template và Lambda functions.\nĐể quản lí ứng dụng và cấu hình hosting ở Amplify Console, hãy chạy câu lệnh amplify console.\n"
},
{
	"uri": "/vi/7-rekognition/",
	"title": "Cấu hình cho trích xuất metadata từ hình ảnh: Amazon Rekognition",
	"tags": [],
	"description": "",
	"content": "Amazon Rekognition là gì? Amazon Rekognition giúp chúng ta dễ dàng tải hình ảnh và video và phân tích cho ứng dụng của bạn bằng cách sử dụng công nghệ deep learning (khi sử dụng không cần phải có chuyên môn ở mảng machine learning). Với Amazon Rekognition, bạn có thể xác định objects, people, text, scenes và các activities trong ảnh và videos.\nỞ bước này, chúng ta sẽ thêm tính năng dò tìm những objects của ảnh được tải lên và gán labels cho những objects đó.\nCấu hình Amazon Rekognition Integration Vào thư mục sam/src/handlers/detectLabels và mở file app.js. Coppy đoạn code dưới đây và past vào file đó:\nconst { DynamoDBClient } = require(\u0026#39;@aws-sdk/client-dynamodb\u0026#39;)\rconst { DynamoDBDocumentClient, UpdateCommand } = require(\u0026#39;@aws-sdk/lib-dynamodb\u0026#39;)\rconst { RekognitionClient, DetectLabelsCommand } = require(\u0026#39;@aws-sdk/client-rekognition\u0026#39;)\rconst ddbClient = new DynamoDBClient()\rconst ddbDocClient = DynamoDBDocumentClient.from(ddbClient)\rconst rekognitionClient = new RekognitionClient()\rconst tableName = process.env.TASKS_TABLE\rexports.handler = async (event) =\u0026gt; {\rconsole.info(JSON.stringify(event, null, 2))\rconst bucket = event.Records[0].s3.bucket.name\rconst key = decodeURIComponent(event.Records[0].s3.object.key.replace(/\\+/g, \u0026#39; \u0026#39;))\rconst user = key.split(\u0026#39;/\u0026#39;)[0]\rconst taskId = key.split(\u0026#39;/\u0026#39;)[1]\rconst command = new UpdateCommand({\rTableName: tableName,\rKey: { user: `user#${user}`, id: `task#${taskId}` },\rUpdateExpression: \u0026#39;SET upload = :u\u0026#39;,\rExpressionAttributeValues: {\r\u0026#39;:u\u0026#39;: `s3://${bucket}/${key}`\r},\rReturnValues: \u0026#39;UPDATED_NEW\u0026#39;\r})\rconsole.log(`UpdateCommand: ${JSON.stringify(command, null, 2)}`)\rtry {\rconsole.log(`Saving upload for task ${taskId}: s3://${bucket}/${key}`)\rconst data = await ddbDocClient.send(command)\rconsole.log(\u0026#39;UpdateItem succeeded:\u0026#39;, JSON.stringify(data, null, 2))\r} catch (err) {\rconsole.log(\u0026#39;Unable to update item. Error JSON:\u0026#39;, JSON.stringify(err, null, 2))\rthrow err\r}\rconsole.log(`Detecting labels for bucket ${bucket} and key ${key}`)\rconst imageParams = {\rImage: {\rS3Object: {\rBucket: bucket,\rName: key\r}\r}\r}\rconst labelData = await rekognitionClient.send(\rnew DetectLabelsCommand(imageParams)\r)\rconsole.log(\u0026#39;Success, labels detected.\u0026#39;, labelData)\rconst labels = []\rfor (let j = 0; j \u0026lt; labelData.Labels.length; j++) {\rconst name = labelData.Labels[j].Name\rlabels.push(name)\r}\rconsole.log(`Label data: ${JSON.stringify(labels)}`)\rconst updateLabelsCommand = new UpdateCommand({\rTableName: tableName,\rKey: { user: `user#${user}`, id: `task#${taskId}` },\rUpdateExpression: \u0026#39;SET labels = :s\u0026#39;,\rExpressionAttributeValues: {\r\u0026#39;:s\u0026#39;: labels\r},\rReturnValues: \u0026#39;UPDATED_NEW\u0026#39;\r})\rtry {\rconsole.log(`Saving labels for task ${taskId}: ${labels}`)\rconst data = await ddbDocClient.send(updateLabelsCommand)\rconsole.log(\u0026#39;UpdateItem succeeded:\u0026#39;, JSON.stringify(data, null, 2))\r} catch (err) {\rconsole.log(\u0026#39;Unable to update item. Error JSON:\u0026#39;, JSON.stringify(err, null, 2))\rthrow err\r}\rconst response = {\rstatusCode: 200,\rheaders: {\r\u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;\r},\rbody: JSON.stringify(labels)\r}\rreturn response\r} Chức năng chính của đoạn code trên:\nĐoạn code import AWS SDK và khởi tạo các client cho DynamoDB và Rekognition. Lấy biến môi trường TASKS_TABLE để tạo ra một biến tên tableName. Function trích xuất thông tin liên quan đến event object. Nó truy xuất buckect và filename của object được tải lên trong S3 bucket. Nó tách các key ra để lấy người dùng và ID của task liên kết với object được tải lên. UpdateCommand được tạo ra để cập nhật item trong DynamoDB. Command được log ở console cho mục đích debug. const command = new UpdateCommand({\rTableName: tableName,\rKey: { user: `user#${user}`, id: `task#${taskId}` },\rUpdateExpression: \u0026#39;SET upload = :u\u0026#39;,\rExpressionAttributeValues: {\r\u0026#39;:u\u0026#39;: `s3://${bucket}/${key}`\r},\rReturnValues: \u0026#39;UPDATED_NEW\u0026#39;\r})\rconsole.log(`UpdateCommand: ${JSON.stringify(command, null, 2)}`) Funtion chạy đến UpdateCommand để cập nhật item trong DynamoDB. Nó log message khi lưu thông tin của object được tải lên và URL của object đó. Nếu cập nhật thành công, sẽ có response được log. Nếu không, sẽ có error được log và throw ra. try {\rconsole.log(`Saving upload for task ${taskId}: s3://${bucket}/${key}`)\rconst data = await ddbDocClient.send(command)\rconsole.log(\u0026#39;UpdateItem succeeded:\u0026#39;, JSON.stringify(data, null, 2))\r} catch (err) {\rconsole.log(\u0026#39;Unable to update item. Error JSON:\u0026#39;, JSON.stringify(err, null, 2))\rthrow err\r} Function được thực thi để detect các label của hình ảnh được tải lên bằng Amazon Rekognition. Nó log thông báo của hành động detec label trong bucket. Object imageParams được tạo ra để xác định hình ảnh (S3 object) được detect label. DetectLabelsCommand được tạo ra để gọi Rekognition API để detect label của hình ảnh. Các detected label được lưu trữ trong mảng các labels. console.log(`Detecting labels for bucket ${bucket} and key ${key}`)\rconst imageParams = {\rImage: {\rS3Object: {\rBucket: bucket,\rName: key\r}\r}\r}\rconst labelData = await rekognitionClient.send(\rnew DetectLabelsCommand(imageParams)\r)\rconsole.log(\u0026#39;Success, labels detected.\u0026#39;, labelData)\rconst labels = []\rfor (let j = 0; j \u0026lt; labelData.Labels.length; j++) {\rconst name = labelData.Labels[j].Name\rlabels.push(name)\r} Tóm lại, Lambda function này xử lí các sự kiện khi có object được tải lên trong S3 bucket. Nó cập nhật item trong DynamoDB với thông tin được tải lên như S3 URL. Sau đó, nó sử dụng Amazon Rekognition để detect labels trong hình ảnh và cập nhật item trong DynamoDB với các detected labels. Function phản hồi bằng một object dạng JSON bao gồm detected labels.\nTiếp theo chúng ta cần thêm một resource mới AWS::Serverless::Function vào file template.yaml trong thư mục sam, trong mục Resources, dưới function UploadsBucket. Coppy và paste đoạn code bên dưới vào file template.yaml trong thư mục sam.\n# DetectLables Lambda Function\rDetectLabelsFunction:\rType: AWS::Serverless::Function\rProperties:\rCodeUri: src/handlers/detectLabels\rEnvironment:\rVariables:\rTASKS_TABLE: !Ref TasksTable\rEvents:\rObjectCreatedEvent:\rType: S3\rProperties:\rBucket: !Ref UploadsBucket\rEvents: s3:ObjectCreated:*\rHandler: app.handler\rPolicies:\r- DynamoDBCrudPolicy:\rTableName: !Ref TasksTable\r- RekognitionDetectOnlyPolicy: {}\r- Version: 2012-10-17\rStatement:\r- Effect: Allow\rAction: s3:GetObject*\rResource: !Sub \u0026#34;arn:aws:s3:::uploads-${AWS::StackName}-${AWS::Region}-${AWS::AccountId}*\u0026#34;\rRuntime: nodejs14.x Chúng sẽ làm như hình dưới đây:\nChú ý ở thuộc tính ObjectCreatedEvent. Event này sẽ trigger Lambda function khi một object được tải lên bucket.\nDeploy lại ứng dụng sau khi thay đổi Với sự thay đổi code của chúng ta khi chỉnh sửa file template.yml và thêm file detectLabels.js, chúng ta cần build và deploy lại ứng dụng để thực thi các thay đổi. Chúng ta sẽ deploy chạy lệnh sau:\nHãy chắn chắn rằng ở terminal, bạn đang ở thư mục sam, chạy câu lệnh này cd ~/environment/serverless-tasks-webapp/sam\rĐầu tiên chúng ta sẽ build ứng dụng:\nsam build Khi build thành công, chúng ta sẽ thấy như hình: Tiếp đến, chúng ta sẽ deploy ứng dụng:\nsam deploy Sau khi deploy thành công, chúng ta sẽ thấy như hình\nBây giờ, chúng ta đã có thể trải nghiệm Amazon Rekognition ở ứng dụng của chúng ta.\nAmazon Rekognition sẽ phân tích các hình ảnh được lưu trữ ở Amazon S3 bucket. Ứng dụng web của chúng ta cho phép bạn được tải ảnh lên và gán vào task. Chúng ta làm như sau:\nSau khi các bạn tạo một task mới, ở phần My Tasks, các bạn sẽ thấy nó và nút Choose file. Click vào nút đó để chọn một ảnh từ máy tính của bạn có đuôi PNG, JPEG, etc. Click vào nút Upload để tải ảnh lên. Sau khi làm các bước trên, bạn sẽ thấy dòng hiển thị quá trình Detecting Labels.\nSau khi quá trình detect hoàn tất, bạn sẽ thấy các label được detect hiển thị.\nMô tả lại quá trình detect label vừa thực hiện Hình ảnh được tải lên vào S3 bucket S3 bucket được cấu hình cho phép trigger Lambda function DetectLabels khi có object được tạo ra trong bucket. Lambda function DetectLabels được gọi và nó sử dụng Amazon Rekognition để detect label của hình ảnh. Detected lables được lưu vào DynamoDB. Ứng dựng refreshes thông tin chi tiết của task. Để ý rằng cách chúng ta thêm một tính năng mới vào ứng dụng của chúng ta mà không thay đổi quá nhiều. Điều này chứng tỏ sự linh hoạt của serverless architectures - khả năng mở rộng và tính module hóa của nó.\n"
},
{
	"uri": "/vi/8-terminate/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "SAM-created Resources Cách đơn giản nhất để xóa resources được tạo ra bởi SAM là sử dụng câu lệnh sam delete. Tuy nhiên, trước khi chạy câu lệnh đó, bạn cần chắn chắn rằng S3 bucket chứa hình ảnh tải lên đã được dọn dẹp sạch.\nBạn hãy sử dụng câu lệnh aws s3 ls để thấy được danh sách cái file trong bucket. Hãy làm như hình.\nBạn sẽ thấy bucket tên uploads-tasks-app-ap-southeast-1-127779471063 trong đó ap-southeast-1 là region của bạn và 127779471063 là ID của AWS account.\nHãy đi đến thư mục /sam bằng câu lệnh cd ~/environment/serverless-tasks-webapp/sam. Bucket của workshop này được kích hoạt versioning nên bạn phải dọn dẹp nó bằng AWS SDK. Tìm đến file emtpy_versioned_bucket.py trong thư mục /sam và modify nó bằng cách chỉnh sửa tên bucket trên sau khi chạy câu lệnh aws s3 ls. Lưu lại file và chạy câu lệnh sau để dọn dẹp bucket:\npython empty_versioned_bucket.py Chúng ta sẽ có kết quả như hình:\nBây giờ chúng ta có thể chạy câu lệnh:\nsam delete Vậy là chúng ta đã xóa thành công các resources được tạo ra bởi SAM.\nAmplify Hosting Di chuyển vào thư mục /webapp, chúng ta có thể xóa Amplify project bằng câu lệnh:\ncd ~/environment/serverless-tasks-webapp/webapp\ramplify delete Sau khi xóa thành công, chúng ta sẽ thấy như hình:\nCác bạn hãy nhớ vào IAM console, chọn user amplify-user được tạo ra ở bước 2.4 - Cài đặt Amplify CLI và xóa nó cùng Access Key được tạo ra vì nó không được tự động xóa khi chạy câu lệnh amplify delete.\nCloudWatch Logs Bạn phải xóa các nhóm log trong CloudWatch Logs và streams được tạo ra khi sử dụng ứng dụng. Hãy vào CloudWatch Logs console, tiếp theo vào Log groups ở thanh điều hướng bên trái, chọn các Log group của workshop này và xóa chúng.\nVậy là chúng ta đã dọn dẹp tất cả tài nguyên trong workshop này.\n"
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]